version: '3.8' # Docker Compose 파일 형식 버전. 최신 기능을 사용하기 위해 3.8 버전을 지정합니다.

services:
  # --- 1. MySQL 데이터베이스 서비스 정의 (db) ---
  db:
    image: mysql:8.0 # MySQL 8.0 공식 Docker 이미지를 사용합니다.
    container_name: news_mysql_db # 이 컨테이너에 'news_mysql_db'라는 이름을 부여합니다.
    environment: # MySQL 컨테이너의 초기 설정에 필요한 환경 변수들입니다.
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD} # .env 파일에서 루트 비밀번호를 가져옵니다.
      MYSQL_DATABASE: ${MYSQL_DATABASE}           # .env 파일에서 생성할 데이터베이스 이름을 가져옵니다.
      MYSQL_USER: ${MYSQL_USER}                   # .env 파일에서 생성할 사용자 이름을 가져옵니다.
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}           # .env 파일에서 생성할 사용자 비밀번호를 가져옵니다.
    ports:
      - "3306:3306" # 호스트 머신의 3306 포트를 컨테이너의 3306 포트에 연결합니다.
                    # 이를 통해 호스트에서 직접 MySQL에 접근하거나, 다른 외부 서비스가 접근할 수 있습니다.
    volumes:
      - db_data:/var/lib/mysql # 'db_data'라는 명명된 볼륨을 컨테이너의 MySQL 데이터 저장 경로에 마운트합니다.
                               # 이 볼륨 덕분에 컨테이너가 삭제되어도 데이터베이스 데이터는 영구적으로 보존됩니다.
    healthcheck: # 데이터베이스가 완전히 시작되고 클라이언트 연결을 받을 준비가 되었는지 확인하는 헬스체크입니다.
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u$$MYSQL_USER", "-p$$MYSQL_PASSWORD"]
      interval: 10s # 10초마다 헬스체크를 수행합니다.
      timeout: 5s # 헬스체크 명령이 5초 안에 완료되지 않으면 실패로 간주합니다.
      retries: 5 # 헬스체크가 5번 연속 실패하면 컨테이너를 'unhealthy' 상태로 간주합니다.
      # 이 헬스체크는 'app_py38' 서비스가 'db' 서비스가 준비될 때까지 기다리도록 하는 데 사용됩니다.

  # --- 2. Python 3.8 애플리케이션 서비스 정의 (app_py38) ---
  # naverapi.py (데이터 수집) 및 news_cluster.py (클러스터링)를 실행합니다.
  app_py38:
    build:
      context: ./app_py38 # 이 서비스의 이미지를 빌드할 때 'my_news_app/app_py38' 디렉토리를 빌드 컨텍스트로 사용합니다.
      dockerfile: Dockerfile_py38 # 해당 디렉토리 내의 'Dockerfile_py38' 파일을 Dockerfile로 사용합니다.
    container_name: news_pipeline_py38 # 이 컨테이너에 'news_pipeline_py38'라는 이름을 부여합니다.
    depends_on: # 이 서비스가 시작되기 위한 의존성 조건을 정의합니다.
      db:
        condition: service_healthy # 'db' 서비스가 위에서 정의된 헬스체크를 통과하여 'healthy' 상태가 될 때까지 기다립니다.
                                   # 이렇게 함으로써 'app_py38'이 DB에 연결을 시도할 때 DB가 확실히 준비되어 있도록 합니다.
    environment: # 호스트의 .env 파일에서 필요한 환경 변수들을 이 컨테이너로 전달합니다.
      NAVER_CLIENT_ID: ${NAVER_CLIENT_ID}
      NAVER_KEY: ${NAVER_KEY}
      DB_HOST: db # MySQL 서비스의 이름 'db'를 사용하여 네트워크 내부에서 MySQL 컨테이너에 접근합니다.
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
    volumes:
      - ./data:/app/data # 호스트 머신의 'my_news_app/data' 디렉토리를 이 컨테이너의 '/app/data' 경로에 마운트합니다.
                          # naverapi.py가 생성하는 데이터나 news_cluster.py가 생성하는 news_preproc.xlsx 파일이
                          # 이 공유 볼륨에 저장되어 'app_py310' 컨테이너가 접근할 수 있게 됩니다.

  # --- 3. Python 3.10 애플리케이션 서비스 정의 (app_py310) ---
  # AIapi.py (생성형 AI 요약)를 실행합니다.
  app_py310:
    build:
      context: ./app_py310 # 이 서비스의 이미지를 빌드할 때 'my_news_app/app_py310' 디렉토리를 빌드 컨텍스트로 사용합니다.
      dockerfile: Dockerfile_py310 # 해당 디렉토리 내의 'Dockerfile_py310' 파일을 Dockerfile로 사용합니다.
    container_name: news_pipeline_py310 # 이 컨테이너에 'news_pipeline_py310'라는 이름을 부여합니다.
    depends_on: # 이 서비스가 시작되기 위한 의존성 조건을 정의합니다.
      app_py38:
        condition: service_completed_successfully # 'app_py38' 컨테이너가 내부 스크립트 실행을 성공적으로 완료하고 종료될 때까지 기다립니다.
                                                 # 이렇게 함으로써 AIapi.py가 news_preproc.xlsx 파일을 읽기 전에
                                                 # news_cluster.py가 해당 파일을 생성 완료하도록 보장합니다.
    environment: # 호스트의 .env 파일에서 필요한 환경 변수들을 이 컨테이너로 전달합니다.
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
      DB_HOST: db # 마찬가지로 MySQL 서비스의 이름 'db'를 사용하여 DB에 접근합니다.
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
    volumes:
      - ./data:/app/data # 호스트의 'my_news_app/data' 디렉토리를 이 컨테이너의 '/app/data' 경로에 마운트합니다.
                          # 'app_py38'이 생성한 news_preproc.xlsx 파일을 읽고, AIapi.py가 생성하는
                          # news_summary.xlsx 파일을 저장할 수 있도록 합니다.

# --- 명명된 볼륨 정의 ---
volumes:
  db_data: # MySQL 데이터 저장을 위한 명명된 볼륨입니다.
           # 이 볼륨은 Docker가 관리하며, 컨테이너가 삭제되어도 데이터는 유지됩니다.
